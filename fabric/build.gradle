apply from: "https://maven.itsmeow.dev/scripts/architectury-fabric.gradle"

configurations {
    shadowModImplementation
    modImplementation.extendsFrom shadowModImplementation
}

repositories {
    flatDir {
        dir 'libs'
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = 'Ladysnake Mods'
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
    }
    maven {
        url = "https://maven.shedaniel.me/"
    }
}

dependencies {
    shadowModImplementation("dev.itsmeow.imdlib:imdlib-fabric:${rootProject.imdlib_version}") {
        transitive = false
    }
    modImplementation("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:3.0.0") {
        transitive = false
    }
    modImplementation("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:3.0.0") {
        exclude(group: "net.fabricmc")
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation("dev.emi:trinkets:${rootProject.trinkets_version}") {
        transitive = false
    }
    modRuntimeOnly("com.terraformersmc:modmenu:2.0.14") {
        transitive = false
    }
    modApi ("me.shedaniel.cloth:cloth-config:5.2.47") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    runtimeOnly("me.shedaniel.cloth:basic-math:0.6.0")
}

shadowJar {
    configurations = [project.configurations.shadowCommon, project.configurations.shadowModImplementation]
    relocate 'dev.itsmeow.imdlib', "${rootProject.maven_group}.imdlib"
    classifier "dev-shadow"
}

remapJar {
    classifier "remap"
}

task fixJar(type: Jar) {
    dependsOn remapJar
    from remapJar.archiveFile.map { zipTree(it) }
    manifest {
        from {
            zipTree(remapJar.archiveFile).find {
                it.name == "MANIFEST.MF"
            }
        }
    }
    filesMatching("**/FabricMixinPlugin.java") {
        filter {
            line -> {
                line.replaceAll("dev.itsmeow.imdlib.mixin", "dev.itsmeow.betteranimalsplus.imdlib.mixin")
            }
        }
    }
    filesMatching("**/fabric.mod.json") {
        filter {
            line -> {
                line = line.replaceAll("dev.itsmeow.imdlib", "dev.itsmeow.betteranimalsplus.imdlib")
                line.replaceAll('mixin.imdlib.json', 'mixin.imdlib-betteranimalsplus.json","mixin.imdlib-betteranimalsplus-fabric.json')
            }
        }
    }
    rename("mixin.imdlib.json", "mixin.imdlib-betteranimalsplus.json")
    rename("imdlib-common-refmap.json", "imdlib-betteranimalsplus-common-refmap.json")
    filesMatching("mixin.imdlib.json") {
        filter {
            line ->
                {
                    line = line.replaceAll('dev.itsmeow.imdlib', 'dev.itsmeow.betteranimalsplus.imdlib')
                    line.replaceAll('imdlib-common-refmap.json', 'imdlib-betteranimalsplus-common-refmap.json')
                }
        }
    }
    rename("mixin.imdlib-fabric.json", "mixin.imdlib-betteranimalsplus-fabric.json")
    rename("imdlib-fabric-refmap.json", "imdlib-betteranimalsplus-fabric-refmap.json")
    filesMatching("mixin.imdlib-fabric.json") {
        filter {
            line ->
                {
                    line = line.replaceAll('dev.itsmeow.imdlib', 'dev.itsmeow.betteranimalsplus.imdlib')
                    line.replaceAll('imdlib-fabric-refmap.json', 'imdlib-betteranimalsplus-fabric-refmap.json')
                }
        }
    }
    filesMatching("imdlib-common-refmap.json") {
        filter {
            line -> line.replaceAll('dev/itsmeow/imdlib/mixin/', 'dev/itsmeow/betteranimalsplus/imdlib/mixin/')
        }
    }
    filesMatching("imdlib-fabric-refmap.json") {
        filter {
            line -> line.replaceAll('dev/itsmeow/imdlib/mixin/', 'dev/itsmeow/betteranimalsplus/imdlib/mixin/')
        }
    }
    classifier "fabric"
}

sourcesJar.dependsOn fixJar