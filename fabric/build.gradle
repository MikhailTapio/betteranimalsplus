plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

configurations {
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    shadowModImplementation
    modImplementation.extendsFrom shadowModImplementation
}

architectury {
    platformSetupLoomIde()
    fabric()
}

repositories {
    flatDir {
        dirs 'libs', '../common/libs'
    }
    maven {
        name = 'Ladysnake Mods'
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
    }
    maven {
        name = "Curse Maven"
        url = "https://cursemaven.com"
    }
}
dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modApi "me.shedaniel:architectury-fabric:${rootProject.architectury_version}"

    implementation(project(path: ":common", configuration: "dev")) {
        transitive = false
    }
    developmentFabric(project(path: ":common", configuration: "dev")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) {
        transitive = false
    }

    shadowModImplementation("dev.itsmeow.imdlib:imdlib:1.16.5-dev:fabric") {
        transitive = false
    }
    modImplementation("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${rootProject.cardinal_components_version}") {
        transitive = false
    }
    shadowModImplementation("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:${rootProject.cardinal_components_version}") {
        transitive = false
    }
    modRuntimeOnly("curse.maven:modmenu-308702:3479748") {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon, project.configurations.shadowModImplementation]
    relocate 'dev.itsmeow.imdlib', "${rootProject.maven_group}.imdlib"
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    classifier "remap"
}

task fixJar(type: Jar) {
    dependsOn remapJar
    from remapJar.archiveFile.map { zipTree(it) }
    manifest {
        from {
            zipTree(remapJar.archiveFile).find {
                it.name == "MANIFEST.MF"
            }
        }
    }
    filesMatching("**/fabric.mod.json") {
        filter {
            line -> line.replaceAll('mixin.imdlib.json', 'mixin.imdlib-betteranimalsplus.json')
        }
    }
    rename("mixin.imdlib.json", "mixin.imdlib-betteranimalsplus.json")
    rename("imdlib-common-refmap.json", "imdlib-betteranimalsplus-common-refmap.json")
    filesMatching("mixin.imdlib.json") {
        filter {
            line ->
                {
                    line = line.replaceAll('dev.itsmeow.imdlib.mixin', 'dev.itsmeow.betteranimalsplus.imdlib.mixin')
                    line.replaceAll('imdlib-common-refmap.json', 'imdlib-betteranimalsplus-common-refmap.json')
                }
        }
    }
    filesMatching("imdlib-common-refmap.json") {
        filter {
            line -> line.replaceAll('dev/itsmeow/imdlib/mixin/', 'dev/itsmeow/betteranimalsplus/imdlib/mixin/')
        }
    }
    classifier "fabric"
}

sourcesJar.dependsOn fixJar

jar {
    classifier "dev"
    manifest {
        mainAttributes(
                "Maven-Artifact": "${rootProject.maven_group}:${rootProject.mod_id}-${project.name}:${rootProject.version}",
                "Specification-Title": rootProject.mod_id,
                "Specification-Vendor": "its_meow",
                "Specification-Version": "1",
                "Implementation-Title": rootProject.mod_id,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "its_meow",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                "Built-On": "${rootProject.mc_version}-${rootProject.forge_version}"
        )
    }
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
    manifest {
        mainAttributes(
                "Maven-Artifact": "${rootProject.maven_group}:${rootProject.mod_id}-${project.name}:${rootProject.version}",
                "Specification-Title": rootProject.mod_id,
                "Specification-Vendor": "its_meow",
                "Specification-Version": "1",
                "Implementation-Title": rootProject.mod_id,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "its_meow",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                "Built-On": "${rootProject.mc_version}-${rootProject.forge_version}"
        )
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.mod_id + "-" + project.name
            artifact(remapJar) {
                classifier null
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
            pom {
                name = rootProject.name + "-" + project.name
                url = rootProject.url
                packaging = 'jar'
                scm {
                    connection = "scm:git:git://github.com/" + rootProject.github + ".git"
                    developerConnection = "scm:git:git@github.com:" + rootProject.github + ".git"
                    url = "https://github.com/" + rootProject.github
                }
                issueManagement {
                    system = 'github'
                    url = "https://github.com/" + rootProject.github + ".git/issues"
                }
                organization {
                    name = 'itsmeow Mods'
                    url = 'https://itsmeow.dev/'
                }
            }
        }
    }

}